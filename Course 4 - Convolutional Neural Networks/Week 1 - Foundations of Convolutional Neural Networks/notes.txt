--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0.  Introduction
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	Computer vision
	-	Example applications: Image classification, object detection, art
	- 	The size of images is a common issue for computer vision problems, ex: 1000px x 1000px x rgb = 3 million features
	
	Convolution operation
	-	Convolution is applied on a matrix by using a smaller matrix that is elementwise multiplication on while sliding
		though all the sub positions of the larger matrix
	- 	Start top left and slide to the right until the end is reached, jump down a step and repeat.
	-	The smaller matrix is called the filter or a kernel
	-	Ex: 6x6 matrix with a 3x3 filter gives a 4x4 convolution result
	-	Python: conv_forward, tf: ft.nn.conv2d, keras: Conv2D
	
	Edge detection:
	-	Vertical edge detection filter can be 	[1 0 -1] and a horizontal can be	[ 1  1  1] 
															[1 0 -1]									[ 0  0  0]
															[1 0 -1]									[-1 -1 -1]
	-	When convolution is applied with a filter then a an edge will the transfor into lines in the result
	-	A version of this the sobel filter:	[1 0 -1] or schorr filter 	[ 3 0 -3 ] that puts emphesis on the middle
														[2 0 -2]							[10 0 -10]
														[1 0 -1]							[ 3 0 -3 ]
	- This filter numbers can also be learned
	
	Dimensions and padding
	-	Take nxn matrix and a fxf filter, then the result is (n - f + 1)x(n - f + 1)
	-	Example: 6x6 and 3x3 gives (6 - 3 + 1)x(6 - 3 + 1) = 4x4
	- 	A downside of this is that images shrink
	-	Another downside is that pixels in the edge of images are less impactful
	- 	Padding can be used to remedy both these issues
	- 	To prevent shrinking with padding (n + 2p - f + 1)x(n + 2p - f + 1) = nxn or p = (f - 1)/2
	
	Strided convolution
	-	The sliding window is instead shifted with more than 1 step
	-	Applied in both direction
	- 	Stride size is denoted s
	-	((n + 2p - f)/s + 1)x((n + 2p - f)/s + 1)
	
	Convolution over volumes
	- 	To conv 3d-shapes use a multidimensional matrix
	- 	Ex: 6x6x3 can be convoluted with a 3x3x3 and becomes a 4x4 matrix
	- 	The edge detection can be applied individually by chosing a filter for each layer
	- 	Several filters can be applied at the same time and them produce a multidimensional output which can represent different detections
	- 	Formulas: 	(n)x(n)x(nc) * (f)x(f)x(nc) -> (n - f + 1)x(n - f + 1)x(number_of_filters)
	-	Ex:			6x6x3 * 3x3x3 -> 4x4x(number_of_filters)
	-	Padding and stride can also be applied
	
	One layer CNN
	-	After the convolution the output is divided into the different filter channels
	-	Then a relu and a bias is applied individually
	-	Ex: 4x4x2 gives RelU(4x4 + b1) and RelU(4x4 + b2)
	
	Notation
	-	f[l] = filter size in layer l
	-	p[l] = padding in layer l
	-	s[l] = stride in layer l
	-	nC[l] = number of filters
	-	Input  = (nH[l-1])x(nW[l-1])x(nC[l-1])	(height/width/channel)
	- 	Output = (nH[l])x(nW[l])x(nC[l])
	-	Filter = (f[l])x(f[l])x(nC[l-1])
	-	Act/a[l] = (nH[l])x(nW[l])x(nC[l])
	-	Weights = (f[l])x(f[l])x(nC[l-1])x(nC[l])
	-	Bias = nC[l] or (1,1,1,nC[l])
	-	nH[l] dimension = [(nH[l] + 2p[l] - f[l])/s[l] + 1]
	-	nW[l] dimension = [(nW[l] + 2p[l] - f[l])/s[l] + 1]
	
	Pooling layers
	-	Reduce size and speed computation, also makes some features more robust
	-	Max pooling: Reduce a matrix by dividing it into subsections and taking the max of each section
	-	Ex: 	1	3	2	1  can be divided into 	1 	3	|	2	1	and reduced into 	9	2 by taking the max
				2	9	1	1								2	9	|	1	1							6	3
				1	3	2	3								-------------									
				5	6	1	2								1	3	|	2	3
															5	6	|	1	2
	-	Hyperparameters: f - filter size and s - stride, same as in convolution
	-	Some other types of pooling exist such as average pooling
	
	Advantage of convolutions
	-	Avoiding large matrices and reduce parameters
	-	Parameter sharing: A feature detector that is useful for one part of an image is probably useful for other parts
	-	Sparsity of connections: In each layer, earch output value depend only on a small number of inputs